{"file_contents":{"analysis_options.yaml":{"content":"# This file configures the analyzer, which statically analyzes Dart code to\n# check for errors, warnings, and lints.\n#\n# The issues identified by the analyzer are surfaced in the UI of Dart-enabled\n# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be\n# invoked from the command line by running `flutter analyze`.\n\n# The following line activates a set of recommended lints for Flutter apps,\n# packages, and plugins designed to encourage good coding practices.\ninclude: package:flutter_lints/flutter.yaml\n\nlinter:\n  # The lint rules applied to this project can be customized in the\n  # section below to disable rules from the `package:flutter_lints/flutter.yaml`\n  # included above or to enable additional rules. A list of all available lints\n  # and their documentation is published at https://dart.dev/lints.\n  #\n  # Instead of disabling a lint rule for the entire project in the\n  # section below, it can also be suppressed for a single line of code\n  # or a specific dart file by using the `// ignore: name_of_lint` and\n  # `// ignore_for_file: name_of_lint` syntax on the line or in the file\n  # producing the lint.\n  rules:\n    # avoid_print: false  # Uncomment to disable the `avoid_print` rule\n    # prefer_single_quotes: true  # Uncomment to enable the `prefer_single_quotes` rule\n\n# Additional information about this file can be found at\n# https://dart.dev/guides/language/analysis-options\n","size_bytes":1420},"macos/Flutter/GeneratedPluginRegistrant.swift":{"content":"//\n//  Generated file. Do not edit.\n//\n\nimport FlutterMacOS\nimport Foundation\n\nimport app_links\nimport connectivity_plus\nimport geolocator_apple\nimport path_provider_foundation\nimport shared_preferences_foundation\nimport url_launcher_macos\n\nfunc RegisterGeneratedPlugins(registry: FlutterPluginRegistry) {\n  AppLinksMacosPlugin.register(with: registry.registrar(forPlugin: \"AppLinksMacosPlugin\"))\n  ConnectivityPlusPlugin.register(with: registry.registrar(forPlugin: \"ConnectivityPlusPlugin\"))\n  GeolocatorPlugin.register(with: registry.registrar(forPlugin: \"GeolocatorPlugin\"))\n  PathProviderPlugin.register(with: registry.registrar(forPlugin: \"PathProviderPlugin\"))\n  SharedPreferencesPlugin.register(with: registry.registrar(forPlugin: \"SharedPreferencesPlugin\"))\n  UrlLauncherPlugin.register(with: registry.registrar(forPlugin: \"UrlLauncherPlugin\"))\n}\n","size_bytes":856},"ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md":{"content":"# Launch Screen Assets\n\nYou can customize the launch screen with your own desired assets by replacing the image files in this directory.\n\nYou can also do it by opening your Flutter project's Xcode project with `open ios/Runner.xcworkspace`, selecting `Runner/Assets.xcassets` in the Project Navigator and dropping in the desired images.","size_bytes":336},"ios/Runner/AppDelegate.swift":{"content":"import Flutter\nimport UIKit\n\n@main\n@objc class AppDelegate: FlutterAppDelegate {\n  override func application(\n    _ application: UIApplication,\n    didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?\n  ) -> Bool {\n    GeneratedPluginRegistrant.register(with: self)\n    return super.application(application, didFinishLaunchingWithOptions: launchOptions)\n  }\n}\n","size_bytes":391},"macos/RunnerTests/RunnerTests.swift":{"content":"import Cocoa\nimport FlutterMacOS\nimport XCTest\n\nclass RunnerTests: XCTestCase {\n\n  func testExample() {\n    // If you add code to the Runner application, consider adding tests here.\n    // See https://developer.apple.com/documentation/xctest for more information about using XCTest.\n  }\n\n}\n","size_bytes":290},"linux/runner/my_application.cc":{"content":"#include \"my_application.h\"\n\n#include <flutter_linux/flutter_linux.h>\n#ifdef GDK_WINDOWING_X11\n#include <gdk/gdkx.h>\n#endif\n\n#include \"flutter/generated_plugin_registrant.h\"\n\nstruct _MyApplication {\n  GtkApplication parent_instance;\n  char** dart_entrypoint_arguments;\n};\n\nG_DEFINE_TYPE(MyApplication, my_application, GTK_TYPE_APPLICATION)\n\n// Called when first Flutter frame received.\nstatic void first_frame_cb(MyApplication* self, FlView *view)\n{\n  gtk_widget_show(gtk_widget_get_toplevel(GTK_WIDGET(view)));\n}\n\n// Implements GApplication::activate.\nstatic void my_application_activate(GApplication* application) {\n  MyApplication* self = MY_APPLICATION(application);\n  GtkWindow* window =\n      GTK_WINDOW(gtk_application_window_new(GTK_APPLICATION(application)));\n\n  // Use a header bar when running in GNOME as this is the common style used\n  // by applications and is the setup most users will be using (e.g. Ubuntu\n  // desktop).\n  // If running on X and not using GNOME then just use a traditional title bar\n  // in case the window manager does more exotic layout, e.g. tiling.\n  // If running on Wayland assume the header bar will work (may need changing\n  // if future cases occur).\n  gboolean use_header_bar = TRUE;\n#ifdef GDK_WINDOWING_X11\n  GdkScreen* screen = gtk_window_get_screen(window);\n  if (GDK_IS_X11_SCREEN(screen)) {\n    const gchar* wm_name = gdk_x11_screen_get_window_manager_name(screen);\n    if (g_strcmp0(wm_name, \"GNOME Shell\") != 0) {\n      use_header_bar = FALSE;\n    }\n  }\n#endif\n  if (use_header_bar) {\n    GtkHeaderBar* header_bar = GTK_HEADER_BAR(gtk_header_bar_new());\n    gtk_widget_show(GTK_WIDGET(header_bar));\n  gtk_header_bar_set_title(header_bar, \"أولديزز وركرز\");\n    gtk_header_bar_set_show_close_button(header_bar, TRUE);\n    gtk_window_set_titlebar(window, GTK_WIDGET(header_bar));\n  } else {\n  gtk_window_set_title(window, \"أولديزز وركرز\");\n  }\n\n  gtk_window_set_default_size(window, 1280, 720);\n\n  g_autoptr(FlDartProject) project = fl_dart_project_new();\n  fl_dart_project_set_dart_entrypoint_arguments(project, self->dart_entrypoint_arguments);\n\n  FlView* view = fl_view_new(project);\n  GdkRGBA background_color;\n  // Background defaults to black, override it here if necessary, e.g. #00000000 for transparent.\n  gdk_rgba_parse(&background_color, \"#000000\");\n  fl_view_set_background_color(view, &background_color);\n  gtk_widget_show(GTK_WIDGET(view));\n  gtk_container_add(GTK_CONTAINER(window), GTK_WIDGET(view));\n\n  // Show the window when Flutter renders.\n  // Requires the view to be realized so we can start rendering.\n  g_signal_connect_swapped(view, \"first-frame\", G_CALLBACK(first_frame_cb), self);\n  gtk_widget_realize(GTK_WIDGET(view));\n\n  fl_register_plugins(FL_PLUGIN_REGISTRY(view));\n\n  gtk_widget_grab_focus(GTK_WIDGET(view));\n}\n\n// Implements GApplication::local_command_line.\nstatic gboolean my_application_local_command_line(GApplication* application, gchar*** arguments, int* exit_status) {\n  MyApplication* self = MY_APPLICATION(application);\n  // Strip out the first argument as it is the binary name.\n  self->dart_entrypoint_arguments = g_strdupv(*arguments + 1);\n\n  g_autoptr(GError) error = nullptr;\n  if (!g_application_register(application, nullptr, &error)) {\n     g_warning(\"Failed to register: %s\", error->message);\n     *exit_status = 1;\n     return TRUE;\n  }\n\n  g_application_activate(application);\n  *exit_status = 0;\n\n  return TRUE;\n}\n\n// Implements GApplication::startup.\nstatic void my_application_startup(GApplication* application) {\n  //MyApplication* self = MY_APPLICATION(object);\n\n  // Perform any actions required at application startup.\n\n  G_APPLICATION_CLASS(my_application_parent_class)->startup(application);\n}\n\n// Implements GApplication::shutdown.\nstatic void my_application_shutdown(GApplication* application) {\n  //MyApplication* self = MY_APPLICATION(object);\n\n  // Perform any actions required at application shutdown.\n\n  G_APPLICATION_CLASS(my_application_parent_class)->shutdown(application);\n}\n\n// Implements GObject::dispose.\nstatic void my_application_dispose(GObject* object) {\n  MyApplication* self = MY_APPLICATION(object);\n  g_clear_pointer(&self->dart_entrypoint_arguments, g_strfreev);\n  G_OBJECT_CLASS(my_application_parent_class)->dispose(object);\n}\n\nstatic void my_application_class_init(MyApplicationClass* klass) {\n  G_APPLICATION_CLASS(klass)->activate = my_application_activate;\n  G_APPLICATION_CLASS(klass)->local_command_line = my_application_local_command_line;\n  G_APPLICATION_CLASS(klass)->startup = my_application_startup;\n  G_APPLICATION_CLASS(klass)->shutdown = my_application_shutdown;\n  G_OBJECT_CLASS(klass)->dispose = my_application_dispose;\n}\n\nstatic void my_application_init(MyApplication* self) {}\n\nMyApplication* my_application_new() {\n  // Set the program name to the application ID, which helps various systems\n  // like GTK and desktop environments map this running application to its\n  // corresponding .desktop file. This ensures better integration by allowing\n  // the application to be recognized beyond its binary name.\n  g_set_prgname(APPLICATION_ID);\n\n  return MY_APPLICATION(g_object_new(my_application_get_type(),\n                                     \"application-id\", APPLICATION_ID,\n                                     \"flags\", G_APPLICATION_NON_UNIQUE,\n                                     nullptr));\n}\n","size_bytes":5378},"ios/RunnerTests/RunnerTests.swift":{"content":"import Flutter\nimport UIKit\nimport XCTest\n\nclass RunnerTests: XCTestCase {\n\n  func testExample() {\n    // If you add code to the Runner application, consider adding tests here.\n    // See https://developer.apple.com/documentation/xctest for more information about using XCTest.\n  }\n\n}\n","size_bytes":285},"tool/generate_icon.py":{"content":"from __future__ import annotations\n\nimport os\n\nfrom PIL import Image, ImageDraw, ImageFont\n\n\nOUTPUT_PATH = os.path.join('assets', 'images', 'app_icon.png')\nSIZE = 512\nBACKGROUND_TOP = (243, 112, 33, 255)\nBACKGROUND_BOTTOM = (210, 81, 18, 255)\nTEXT = 'oldes'\nTEXT_COLOR = (255, 255, 255, 255)\nBORDER_COLOR = (252, 231, 214, 255)\nBORDER_WIDTH = 8\nBORDER_RADIUS = 96\n\n\ndef _load_font(size: int) -> ImageFont.FreeTypeFont | ImageFont.ImageFont:\n    preferred_paths = [\n        r'C:/Windows/Fonts/arialbd.ttf',\n        r'C:/Windows/Fonts/arial.ttf',\n        r'/System/Library/Fonts/SFNSDisplay-Bold.ttf',\n        r'/System/Library/Fonts/SFNS.ttf',\n    ]\n    for path in preferred_paths:\n        if os.path.exists(path):\n            return ImageFont.truetype(path, size)\n    return ImageFont.load_default()\n\n\ndef _measure_text(font: ImageFont.ImageFont, text: str) -> tuple[int, int]:\n    if hasattr(font, 'getbbox'):\n        left, top, right, bottom = font.getbbox(text)\n        return right - left, bottom - top\n    width, height = font.getsize(text)\n    return width, height\n\n\ndef _resolve_font(text: str) -> tuple[ImageFont.ImageFont, tuple[int, int]]:\n    max_width = SIZE - 160\n    max_height = SIZE - 160\n\n    for size in range(260, 80, -4):\n        font = _load_font(size)\n        if isinstance(font, ImageFont.FreeTypeFont):\n            width, height = _measure_text(font, text)\n            if width <= max_width and height <= max_height:\n                return font, (width, height)\n\n    fallback_font = _load_font(120)\n    width, height = _measure_text(fallback_font, text)\n    return fallback_font, (width, height)\n\n\ndef main() -> None:\n    img = Image.new('RGBA', (SIZE, SIZE), BACKGROUND_TOP)\n    draw = ImageDraw.Draw(img)\n    for y in range(SIZE):\n        ratio = y / (SIZE - 1)\n        r = int(BACKGROUND_TOP[0] * (1 - ratio) + BACKGROUND_BOTTOM[0] * ratio)\n        g = int(BACKGROUND_TOP[1] * (1 - ratio) + BACKGROUND_BOTTOM[1] * ratio)\n        b = int(BACKGROUND_TOP[2] * (1 - ratio) + BACKGROUND_BOTTOM[2] * ratio)\n        draw.line([(0, y), (SIZE, y)], fill=(r, g, b, 255))\n\n    draw.rounded_rectangle(\n        (64, 64, SIZE - 64, SIZE - 64),\n        radius=BORDER_RADIUS,\n        outline=BORDER_COLOR,\n        width=BORDER_WIDTH,\n    )\n\n    font, (text_width, text_height) = _resolve_font(TEXT)\n    text_x = (SIZE - text_width) / 2\n    text_y = (SIZE - text_height) / 2 - 6\n    draw.text((text_x, text_y), TEXT, font=font, fill=TEXT_COLOR)\n\n    os.makedirs(os.path.dirname(OUTPUT_PATH), exist_ok=True)\n    img.save(OUTPUT_PATH)\n    print(f'Icon written to {OUTPUT_PATH}')\n\n\nif __name__ == '__main__':\n    main()\n","size_bytes":2628},"macos/Runner/MainFlutterWindow.swift":{"content":"import Cocoa\nimport FlutterMacOS\n\nclass MainFlutterWindow: NSWindow {\n  override func awakeFromNib() {\n    let flutterViewController = FlutterViewController()\n    let windowFrame = self.frame\n    self.contentViewController = flutterViewController\n    self.setFrame(windowFrame, display: true)\n\n    RegisterGeneratedPlugins(registry: flutterViewController)\n\n    super.awakeFromNib()\n  }\n}\n","size_bytes":388},"windows/runner/flutter_window.cpp":{"content":"#include \"flutter_window.h\"\n\n#include <optional>\n\n#include \"flutter/generated_plugin_registrant.h\"\n\nFlutterWindow::FlutterWindow(const flutter::DartProject& project)\n    : project_(project) {}\n\nFlutterWindow::~FlutterWindow() {}\n\nbool FlutterWindow::OnCreate() {\n  if (!Win32Window::OnCreate()) {\n    return false;\n  }\n\n  RECT frame = GetClientArea();\n\n  // The size here must match the window dimensions to avoid unnecessary surface\n  // creation / destruction in the startup path.\n  flutter_controller_ = std::make_unique<flutter::FlutterViewController>(\n      frame.right - frame.left, frame.bottom - frame.top, project_);\n  // Ensure that basic setup of the controller was successful.\n  if (!flutter_controller_->engine() || !flutter_controller_->view()) {\n    return false;\n  }\n  RegisterPlugins(flutter_controller_->engine());\n  SetChildContent(flutter_controller_->view()->GetNativeWindow());\n\n  flutter_controller_->engine()->SetNextFrameCallback([&]() {\n    this->Show();\n  });\n\n  // Flutter can complete the first frame before the \"show window\" callback is\n  // registered. The following call ensures a frame is pending to ensure the\n  // window is shown. It is a no-op if the first frame hasn't completed yet.\n  flutter_controller_->ForceRedraw();\n\n  return true;\n}\n\nvoid FlutterWindow::OnDestroy() {\n  if (flutter_controller_) {\n    flutter_controller_ = nullptr;\n  }\n\n  Win32Window::OnDestroy();\n}\n\nLRESULT\nFlutterWindow::MessageHandler(HWND hwnd, UINT const message,\n                              WPARAM const wparam,\n                              LPARAM const lparam) noexcept {\n  // Give Flutter, including plugins, an opportunity to handle window messages.\n  if (flutter_controller_) {\n    std::optional<LRESULT> result =\n        flutter_controller_->HandleTopLevelWindowProc(hwnd, message, wparam,\n                                                      lparam);\n    if (result) {\n      return *result;\n    }\n  }\n\n  switch (message) {\n    case WM_FONTCHANGE:\n      flutter_controller_->engine()->ReloadSystemFonts();\n      break;\n  }\n\n  return Win32Window::MessageHandler(hwnd, message, wparam, lparam);\n}\n","size_bytes":2122},"linux/runner/main.cc":{"content":"#include \"my_application.h\"\n\nint main(int argc, char** argv) {\n  g_autoptr(MyApplication) app = my_application_new();\n  return g_application_run(G_APPLICATION(app), argc, argv);\n}\n","size_bytes":180},"windows/runner/main.cpp":{"content":"#include <flutter/dart_project.h>\n#include <flutter/flutter_view_controller.h>\n#include <windows.h>\n\n#include \"flutter_window.h\"\n#include \"utils.h\"\n\nint APIENTRY wWinMain(_In_ HINSTANCE instance, _In_opt_ HINSTANCE prev,\n                      _In_ wchar_t *command_line, _In_ int show_command) {\n  // Attach to console when present (e.g., 'flutter run') or create a\n  // new console when running with a debugger.\n  if (!::AttachConsole(ATTACH_PARENT_PROCESS) && ::IsDebuggerPresent()) {\n    CreateAndAttachConsole();\n  }\n\n  // Initialize COM, so that it is available for use in the library and/or\n  // plugins.\n  ::CoInitializeEx(nullptr, COINIT_APARTMENTTHREADED);\n\n  flutter::DartProject project(L\"data\");\n\n  std::vector<std::string> command_line_arguments =\n      GetCommandLineArguments();\n\n  project.set_dart_entrypoint_arguments(std::move(command_line_arguments));\n\n  FlutterWindow window(project);\n  Win32Window::Point origin(10, 10);\n  Win32Window::Size size(1280, 720);\n  if (!window.Create(L\"أولديزز وركرز\", origin, size)) {\n    return EXIT_FAILURE;\n  }\n  window.SetQuitOnClose(true);\n\n  ::MSG msg;\n  while (::GetMessage(&msg, nullptr, 0, 0)) {\n    ::TranslateMessage(&msg);\n    ::DispatchMessage(&msg);\n  }\n\n  ::CoUninitialize();\n  return EXIT_SUCCESS;\n}\n","size_bytes":1278},"windows/runner/utils.cpp":{"content":"#include \"utils.h\"\n\n#include <flutter_windows.h>\n#include <io.h>\n#include <stdio.h>\n#include <windows.h>\n\n#include <iostream>\n\nvoid CreateAndAttachConsole() {\n  if (::AllocConsole()) {\n    FILE *unused;\n    if (freopen_s(&unused, \"CONOUT$\", \"w\", stdout)) {\n      _dup2(_fileno(stdout), 1);\n    }\n    if (freopen_s(&unused, \"CONOUT$\", \"w\", stderr)) {\n      _dup2(_fileno(stdout), 2);\n    }\n    std::ios::sync_with_stdio();\n    FlutterDesktopResyncOutputStreams();\n  }\n}\n\nstd::vector<std::string> GetCommandLineArguments() {\n  // Convert the UTF-16 command line arguments to UTF-8 for the Engine to use.\n  int argc;\n  wchar_t** argv = ::CommandLineToArgvW(::GetCommandLineW(), &argc);\n  if (argv == nullptr) {\n    return std::vector<std::string>();\n  }\n\n  std::vector<std::string> command_line_arguments;\n\n  // Skip the first argument as it's the binary name.\n  for (int i = 1; i < argc; i++) {\n    command_line_arguments.push_back(Utf8FromUtf16(argv[i]));\n  }\n\n  ::LocalFree(argv);\n\n  return command_line_arguments;\n}\n\nstd::string Utf8FromUtf16(const wchar_t* utf16_string) {\n  if (utf16_string == nullptr) {\n    return std::string();\n  }\n  unsigned int target_length = ::WideCharToMultiByte(\n      CP_UTF8, WC_ERR_INVALID_CHARS, utf16_string,\n      -1, nullptr, 0, nullptr, nullptr)\n    -1; // remove the trailing null character\n  int input_length = (int)wcslen(utf16_string);\n  std::string utf8_string;\n  if (target_length == 0 || target_length > utf8_string.max_size()) {\n    return utf8_string;\n  }\n  utf8_string.resize(target_length);\n  int converted_length = ::WideCharToMultiByte(\n      CP_UTF8, WC_ERR_INVALID_CHARS, utf16_string,\n      input_length, utf8_string.data(), target_length, nullptr, nullptr);\n  if (converted_length == 0) {\n    return std::string();\n  }\n  return utf8_string;\n}\n","size_bytes":1797},"README.md":{"content":"## أولديزز وركرز – نظام نبض الحضور\r\n\r\nأولديزز وركرز هو تطبيق حضور مبني بـ Flutter لمتابعة فرق العمل عربي بالكامل. يوفر تجربة دخول أنيقة، تحكمًا كاملاً في الحضور داخل حدود الموقع، ومزامنة نبضات الموقع لحظيًا أو عند عودة الاتصال. تم تصميمه ليخدم المطاعم والشركات التي تحتاج إلى إدارة حضور دقيقة وسلسة.\r\n\r\n## المزايا الرئيسية\r\n\r\n- **هوية عربية متكاملة** بطباعات حديثة ورسوم متحركة محسّنة عند الإقلاع.\r\n- **تحقق جغرافي** يمنع تسجيل الحضور خارج نطاق العمل المسموح به.\r\n- **نبضات مستمرة** تُرسل كل بضع ثوانٍ مع تخزين أوفلاين ذكي في Hive عند انقطاع الاتصال.\r\n- **مزامنة تلقائية** تعيد رفع النبضات المؤجلة فور عودة الشبكة أو عند الطلب يدويًا.\r\n- **لوحة تحكم إدارية** تعرض تنبيهات النبضات المزيفة، ملخصات الفريق، وسجلًا غنيًا للنشاط.\r\n\r\n## المتطلبات\r\n\r\n1. وجود Flutter 3.19 أو أعلى وDart 3.9 أو أعلى على جهاز التطوير.\r\n2. ضبط صلاحيات الموقع والإشعارات في المنصات المستهدفة (Android / iOS) حسب سياسة شركتك.\r\n3. تجهيز شعار العلامة في `assets/images/app_icon.png` لتجربة متكاملة.\r\n\r\n## خطوات التشغيل\r\n\r\n```powershell\r\nflutter pub get\r\nflutter test\r\nflutter run\r\n```\r\n\r\n### خادم المراقبة الاحتياطي (اختياري)\r\n\r\nلتجربة تدفق الأنباض محليًا، شغّل الخادم المصغر:\r\n\r\n```powershell\r\ndart run tool/pulse_backup_server.dart\r\n```\r\n\r\nسيعمل على http://localhost:8080 مع حفظ كل نبضة في ملف `backup_pulses.jsonl` للاطلاع والتحليل.\r\n\r\n## إعدادات مهمة\r\n\r\n- يعتمد المشروع على الحزم: `geolocator`, `connectivity_plus`, `hive`, `hive_flutter`, `http`, `path_provider`, `google_fonts`.\r\n- تخزن النبضات المؤجلة في الصندوق `offline_pulses` ويتم مزامنتها بواسطة `PulseSyncManager`.\r\n- الخدمة الخلفية للنبضات مضبوطة في `lib/services/background_pulse_service.dart` مع إذونات المنصات في `AndroidManifest.xml` و`Info.plist`.\r\n\r\n## أفكار للتطوير لاحقًا\r\n\r\n- ربط واجهة خلفية حقيقية (REST أو GraphQL) لحفظ النبضات وتحويلها إلى مؤشرات رواتب.\r\n- تقوية تسجيل الدخول بربطه بمزوّد هوية رسمي.\r\n- تعديل تردد النبضات (مثلاً كل 30–60 ثانية) لتحقيق توازن بين الدقة واستهلاك البطارية.\r\n\r\nبالتوفيق في بناء تجربتك الخاصة مع أولديزز وركرز!  \r\n#\u0000 \u0000t\u0000e\u0000s\u0000t\u00001\u00002\u00003\u0000\r\u0000\n\u0000","size_bytes":3136},"windows/flutter/generated_plugin_registrant.cc":{"content":"//\n//  Generated file. Do not edit.\n//\n\n// clang-format off\n\n#include \"generated_plugin_registrant.h\"\n\n#include <app_links/app_links_plugin_c_api.h>\n#include <connectivity_plus/connectivity_plus_windows_plugin.h>\n#include <geolocator_windows/geolocator_windows.h>\n#include <permission_handler_windows/permission_handler_windows_plugin.h>\n#include <url_launcher_windows/url_launcher_windows.h>\n\nvoid RegisterPlugins(flutter::PluginRegistry* registry) {\n  AppLinksPluginCApiRegisterWithRegistrar(\n      registry->GetRegistrarForPlugin(\"AppLinksPluginCApi\"));\n  ConnectivityPlusWindowsPluginRegisterWithRegistrar(\n      registry->GetRegistrarForPlugin(\"ConnectivityPlusWindowsPlugin\"));\n  GeolocatorWindowsRegisterWithRegistrar(\n      registry->GetRegistrarForPlugin(\"GeolocatorWindows\"));\n  PermissionHandlerWindowsPluginRegisterWithRegistrar(\n      registry->GetRegistrarForPlugin(\"PermissionHandlerWindowsPlugin\"));\n  UrlLauncherWindowsRegisterWithRegistrar(\n      registry->GetRegistrarForPlugin(\"UrlLauncherWindows\"));\n}\n","size_bytes":1023},"windows/runner/win32_window.cpp":{"content":"#include \"win32_window.h\"\n\n#include <dwmapi.h>\n#include <flutter_windows.h>\n\n#include \"resource.h\"\n\nnamespace {\n\n/// Window attribute that enables dark mode window decorations.\n///\n/// Redefined in case the developer's machine has a Windows SDK older than\n/// version 10.0.22000.0.\n/// See: https://docs.microsoft.com/windows/win32/api/dwmapi/ne-dwmapi-dwmwindowattribute\n#ifndef DWMWA_USE_IMMERSIVE_DARK_MODE\n#define DWMWA_USE_IMMERSIVE_DARK_MODE 20\n#endif\n\nconstexpr const wchar_t kWindowClassName[] = L\"FLUTTER_RUNNER_WIN32_WINDOW\";\n\n/// Registry key for app theme preference.\n///\n/// A value of 0 indicates apps should use dark mode. A non-zero or missing\n/// value indicates apps should use light mode.\nconstexpr const wchar_t kGetPreferredBrightnessRegKey[] =\n  L\"Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Themes\\\\Personalize\";\nconstexpr const wchar_t kGetPreferredBrightnessRegValue[] = L\"AppsUseLightTheme\";\n\n// The number of Win32Window objects that currently exist.\nstatic int g_active_window_count = 0;\n\nusing EnableNonClientDpiScaling = BOOL __stdcall(HWND hwnd);\n\n// Scale helper to convert logical scaler values to physical using passed in\n// scale factor\nint Scale(int source, double scale_factor) {\n  return static_cast<int>(source * scale_factor);\n}\n\n// Dynamically loads the |EnableNonClientDpiScaling| from the User32 module.\n// This API is only needed for PerMonitor V1 awareness mode.\nvoid EnableFullDpiSupportIfAvailable(HWND hwnd) {\n  HMODULE user32_module = LoadLibraryA(\"User32.dll\");\n  if (!user32_module) {\n    return;\n  }\n  auto enable_non_client_dpi_scaling =\n      reinterpret_cast<EnableNonClientDpiScaling*>(\n          GetProcAddress(user32_module, \"EnableNonClientDpiScaling\"));\n  if (enable_non_client_dpi_scaling != nullptr) {\n    enable_non_client_dpi_scaling(hwnd);\n  }\n  FreeLibrary(user32_module);\n}\n\n}  // namespace\n\n// Manages the Win32Window's window class registration.\nclass WindowClassRegistrar {\n public:\n  ~WindowClassRegistrar() = default;\n\n  // Returns the singleton registrar instance.\n  static WindowClassRegistrar* GetInstance() {\n    if (!instance_) {\n      instance_ = new WindowClassRegistrar();\n    }\n    return instance_;\n  }\n\n  // Returns the name of the window class, registering the class if it hasn't\n  // previously been registered.\n  const wchar_t* GetWindowClass();\n\n  // Unregisters the window class. Should only be called if there are no\n  // instances of the window.\n  void UnregisterWindowClass();\n\n private:\n  WindowClassRegistrar() = default;\n\n  static WindowClassRegistrar* instance_;\n\n  bool class_registered_ = false;\n};\n\nWindowClassRegistrar* WindowClassRegistrar::instance_ = nullptr;\n\nconst wchar_t* WindowClassRegistrar::GetWindowClass() {\n  if (!class_registered_) {\n    WNDCLASS window_class{};\n    window_class.hCursor = LoadCursor(nullptr, IDC_ARROW);\n    window_class.lpszClassName = kWindowClassName;\n    window_class.style = CS_HREDRAW | CS_VREDRAW;\n    window_class.cbClsExtra = 0;\n    window_class.cbWndExtra = 0;\n    window_class.hInstance = GetModuleHandle(nullptr);\n    window_class.hIcon =\n        LoadIcon(window_class.hInstance, MAKEINTRESOURCE(IDI_APP_ICON));\n    window_class.hbrBackground = 0;\n    window_class.lpszMenuName = nullptr;\n    window_class.lpfnWndProc = Win32Window::WndProc;\n    RegisterClass(&window_class);\n    class_registered_ = true;\n  }\n  return kWindowClassName;\n}\n\nvoid WindowClassRegistrar::UnregisterWindowClass() {\n  UnregisterClass(kWindowClassName, nullptr);\n  class_registered_ = false;\n}\n\nWin32Window::Win32Window() {\n  ++g_active_window_count;\n}\n\nWin32Window::~Win32Window() {\n  --g_active_window_count;\n  Destroy();\n}\n\nbool Win32Window::Create(const std::wstring& title,\n                         const Point& origin,\n                         const Size& size) {\n  Destroy();\n\n  const wchar_t* window_class =\n      WindowClassRegistrar::GetInstance()->GetWindowClass();\n\n  const POINT target_point = {static_cast<LONG>(origin.x),\n                              static_cast<LONG>(origin.y)};\n  HMONITOR monitor = MonitorFromPoint(target_point, MONITOR_DEFAULTTONEAREST);\n  UINT dpi = FlutterDesktopGetDpiForMonitor(monitor);\n  double scale_factor = dpi / 96.0;\n\n  HWND window = CreateWindow(\n      window_class, title.c_str(), WS_OVERLAPPEDWINDOW,\n      Scale(origin.x, scale_factor), Scale(origin.y, scale_factor),\n      Scale(size.width, scale_factor), Scale(size.height, scale_factor),\n      nullptr, nullptr, GetModuleHandle(nullptr), this);\n\n  if (!window) {\n    return false;\n  }\n\n  UpdateTheme(window);\n\n  return OnCreate();\n}\n\nbool Win32Window::Show() {\n  return ShowWindow(window_handle_, SW_SHOWNORMAL);\n}\n\n// static\nLRESULT CALLBACK Win32Window::WndProc(HWND const window,\n                                      UINT const message,\n                                      WPARAM const wparam,\n                                      LPARAM const lparam) noexcept {\n  if (message == WM_NCCREATE) {\n    auto window_struct = reinterpret_cast<CREATESTRUCT*>(lparam);\n    SetWindowLongPtr(window, GWLP_USERDATA,\n                     reinterpret_cast<LONG_PTR>(window_struct->lpCreateParams));\n\n    auto that = static_cast<Win32Window*>(window_struct->lpCreateParams);\n    EnableFullDpiSupportIfAvailable(window);\n    that->window_handle_ = window;\n  } else if (Win32Window* that = GetThisFromHandle(window)) {\n    return that->MessageHandler(window, message, wparam, lparam);\n  }\n\n  return DefWindowProc(window, message, wparam, lparam);\n}\n\nLRESULT\nWin32Window::MessageHandler(HWND hwnd,\n                            UINT const message,\n                            WPARAM const wparam,\n                            LPARAM const lparam) noexcept {\n  switch (message) {\n    case WM_DESTROY:\n      window_handle_ = nullptr;\n      Destroy();\n      if (quit_on_close_) {\n        PostQuitMessage(0);\n      }\n      return 0;\n\n    case WM_DPICHANGED: {\n      auto newRectSize = reinterpret_cast<RECT*>(lparam);\n      LONG newWidth = newRectSize->right - newRectSize->left;\n      LONG newHeight = newRectSize->bottom - newRectSize->top;\n\n      SetWindowPos(hwnd, nullptr, newRectSize->left, newRectSize->top, newWidth,\n                   newHeight, SWP_NOZORDER | SWP_NOACTIVATE);\n\n      return 0;\n    }\n    case WM_SIZE: {\n      RECT rect = GetClientArea();\n      if (child_content_ != nullptr) {\n        // Size and position the child window.\n        MoveWindow(child_content_, rect.left, rect.top, rect.right - rect.left,\n                   rect.bottom - rect.top, TRUE);\n      }\n      return 0;\n    }\n\n    case WM_ACTIVATE:\n      if (child_content_ != nullptr) {\n        SetFocus(child_content_);\n      }\n      return 0;\n\n    case WM_DWMCOLORIZATIONCOLORCHANGED:\n      UpdateTheme(hwnd);\n      return 0;\n  }\n\n  return DefWindowProc(window_handle_, message, wparam, lparam);\n}\n\nvoid Win32Window::Destroy() {\n  OnDestroy();\n\n  if (window_handle_) {\n    DestroyWindow(window_handle_);\n    window_handle_ = nullptr;\n  }\n  if (g_active_window_count == 0) {\n    WindowClassRegistrar::GetInstance()->UnregisterWindowClass();\n  }\n}\n\nWin32Window* Win32Window::GetThisFromHandle(HWND const window) noexcept {\n  return reinterpret_cast<Win32Window*>(\n      GetWindowLongPtr(window, GWLP_USERDATA));\n}\n\nvoid Win32Window::SetChildContent(HWND content) {\n  child_content_ = content;\n  SetParent(content, window_handle_);\n  RECT frame = GetClientArea();\n\n  MoveWindow(content, frame.left, frame.top, frame.right - frame.left,\n             frame.bottom - frame.top, true);\n\n  SetFocus(child_content_);\n}\n\nRECT Win32Window::GetClientArea() {\n  RECT frame;\n  GetClientRect(window_handle_, &frame);\n  return frame;\n}\n\nHWND Win32Window::GetHandle() {\n  return window_handle_;\n}\n\nvoid Win32Window::SetQuitOnClose(bool quit_on_close) {\n  quit_on_close_ = quit_on_close;\n}\n\nbool Win32Window::OnCreate() {\n  // No-op; provided for subclasses.\n  return true;\n}\n\nvoid Win32Window::OnDestroy() {\n  // No-op; provided for subclasses.\n}\n\nvoid Win32Window::UpdateTheme(HWND const window) {\n  DWORD light_mode;\n  DWORD light_mode_size = sizeof(light_mode);\n  LSTATUS result = RegGetValue(HKEY_CURRENT_USER, kGetPreferredBrightnessRegKey,\n                               kGetPreferredBrightnessRegValue,\n                               RRF_RT_REG_DWORD, nullptr, &light_mode,\n                               &light_mode_size);\n\n  if (result == ERROR_SUCCESS) {\n    BOOL enable_dark_mode = light_mode == 0;\n    DwmSetWindowAttribute(window, DWMWA_USE_IMMERSIVE_DARK_MODE,\n                          &enable_dark_mode, sizeof(enable_dark_mode));\n  }\n}\n","size_bytes":8534},"macos/Runner/AppDelegate.swift":{"content":"import Cocoa\nimport FlutterMacOS\n\n@main\nclass AppDelegate: FlutterAppDelegate {\n  override func applicationShouldTerminateAfterLastWindowClosed(_ sender: NSApplication) -> Bool {\n    return true\n  }\n\n  override func applicationSupportsSecureRestorableState(_ app: NSApplication) -> Bool {\n    return true\n  }\n}\n","size_bytes":311},"android/app/src/main/kotlin/com/example/heartbeat/MainActivity.kt":{"content":"package com.example.heartbeat\n\nimport io.flutter.embedding.android.FlutterActivity\n\nclass MainActivity : FlutterActivity()\n","size_bytes":123},"linux/flutter/generated_plugin_registrant.cc":{"content":"//\n//  Generated file. Do not edit.\n//\n\n// clang-format off\n\n#include \"generated_plugin_registrant.h\"\n\n#include <gtk/gtk_plugin.h>\n#include <url_launcher_linux/url_launcher_plugin.h>\n\nvoid fl_register_plugins(FlPluginRegistry* registry) {\n  g_autoptr(FlPluginRegistrar) gtk_registrar =\n      fl_plugin_registry_get_registrar_for_plugin(registry, \"GtkPlugin\");\n  gtk_plugin_register_with_registrar(gtk_registrar);\n  g_autoptr(FlPluginRegistrar) url_launcher_linux_registrar =\n      fl_plugin_registry_get_registrar_for_plugin(registry, \"UrlLauncherPlugin\");\n  url_launcher_plugin_register_with_registrar(url_launcher_linux_registrar);\n}\n","size_bytes":636},"pubspec.yaml":{"content":"name: oldies_workers_app\ndescription: \"تطبيق حضور أولديزز وركرز\"\n# The following line prevents the package from being accidentally published to\n# pub.dev using `flutter pub publish`. This is preferred for private packages.\npublish_to: 'none' # Remove this line if you wish to publish to pub.dev\n\n# The following defines the version and build number for your application.\n# A version number is three numbers separated by dots, like 1.2.43\n# followed by an optional build number separated by a +.\n# Both the version and the builder number may be overridden in flutter\n# build by specifying --build-name and --build-number, respectively.\n# In Android, build-name is used as versionName while build-number used as versionCode.\n# Read more about Android versioning at https://developer.android.com/studio/publish/versioning\n# In iOS, build-name is used as CFBundleShortVersionString while build-number is used as CFBundleVersion.\n# Read more about iOS versioning at\n# https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html\n# In Windows, build-name is used as the major, minor, and patch parts\n# of the product and file versions while build-number is used as the build suffix.\nversion: 1.0.0+1\n\nenvironment:\n  sdk: '>=3.8.0 <4.0.0'\n\n# Dependencies specify other packages that your package needs in order to work.\n# To automatically upgrade your package dependencies to the latest versions\n# consider running `flutter pub upgrade --major-versions`. Alternatively,\n# dependencies can be manually updated by changing the version numbers below to\n# the latest version available on pub.dev. To see which dependencies have newer\n# versions available, run `flutter pub outdated`.\ndependencies:\n  flutter:\n    sdk: flutter\n\n  flutter_localizations:\n    sdk: flutter\n\n  # The following adds the Cupertino Icons font to your application.\n  # Use with the CupertinoIcons class for iOS style icons.\n  cupertino_icons: ^1.0.8\n  geolocator: ^10.1.0\n  http: ^1.2.2\n  connectivity_plus: ^6.0.5\n  hive: ^2.2.3\n  hive_flutter: ^1.1.0\n  path_provider: ^2.1.4\n  permission_handler: ^11.3.1\n  supabase_flutter: ^2.5.4\n  google_fonts: ^6.2.1\n  universal_io: ^2.2.2\n\ndev_dependencies:\n  flutter_test:\n    sdk: flutter\n\n  # The \"flutter_lints\" package below contains a set of recommended lints to\n  # encourage good coding practices. The lint set provided by the package is\n  # activated in the `analysis_options.yaml` file located at the root of your\n  # package. See that file for information about deactivating specific lint\n  # rules and activating additional ones.\n  flutter_lints: ^5.0.0\n  flutter_launcher_icons: ^0.13.1\n\n# For information on the generic Dart part of this file, see the\n# following page: https://dart.dev/tools/pub/pubspec\n\n# The following section is specific to Flutter packages.\nflutter:\n\n  # The following line ensures that the Material Icons font is\n  # included with your application, so that you can use the icons in\n  # the material Icons class.\n  uses-material-design: true\n\n  assets:\n    - assets/images/\n\nflutter_launcher_icons:\n  android: \"ic_launcher\"\n  ios: true\n  image_path: \"assets/images/app_icon.png\"\n  remove_alpha_ios: true\n  web:\n    generate: true\n    image_path: \"assets/images/app_icon.png\"\n    background_color: \"#F37021\"\n    theme_color: \"#F37021\"\n  windows:\n    generate: true\n    image_path: \"assets/images/app_icon.png\"\n    icon_size: 256\n  macos:\n    generate: true\n    image_path: \"assets/images/app_icon.png\"\n\n  # To add assets to your application, add an assets section, like this:\n  # assets:\n  #   - images/a_dot_burr.jpeg\n  #   - images/a_dot_ham.jpeg\n\n  # An image asset can refer to one or more resolution-specific \"variants\", see\n  # https://flutter.dev/to/resolution-aware-images\n\n  # For details regarding adding assets from package dependencies, see\n  # https://flutter.dev/to/asset-from-package\n\n  # To add custom fonts to your application, add a fonts section here,\n  # in this \"flutter\" section. Each entry in this list should have a\n  # \"family\" key with the font family name, and a \"fonts\" key with a\n  # list giving the asset and other descriptors for the font. For\n  # example:\n  # fonts:\n  #   - family: Schyler\n  #     fonts:\n  #       - asset: fonts/Schyler-Regular.ttf\n  #       - asset: fonts/Schyler-Italic.ttf\n  #         style: italic\n  #   - family: Trajan Pro\n  #     fonts:\n  #       - asset: fonts/TrajanPro.ttf\n  #       - asset: fonts/TrajanPro_Bold.ttf\n  #         weight: 700\n  #\n  # For details regarding fonts from package dependencies,\n  # see https://flutter.dev/to/font-from-package\n","size_bytes":4644},"replit.md":{"content":"# Oldies Workers - Employee Attendance System\n\n## Overview\n**Oldies Workers** (أولديزز وركرز) is a comprehensive Flutter-based employee attendance tracking system with real-time location monitoring and pulse-based verification. The app features a mobile/web client for employees and an administrative dashboard for managers.\n\n## Project Status\n- **Language**: Dart 3.8.0 / Flutter 3.32.0\n- **Platform**: Cross-platform (Web, Android, iOS, Desktop)\n- **Current Setup**: Web deployment configured\n- **Backend**: Supabase integration in progress\n\n## Core Features\n\n### Employee Features\n- **Location-Based Check-in/Check-out**: Geo-fence validation ensures employees are within the designated work area\n- **Continuous Pulse System**: Periodic location updates (pulses) sent every few seconds\n- **Offline Support**: Smart offline storage using Hive database with auto-sync when connection returns\n- **Permission Requests**: Request time off, early leave, or late arrival with notes\n- **Activity Dashboard**: View pulse history, attendance stats, and pending offline pulses\n\n### Admin Features\n- **Dashboard**: Real-time monitoring of employee activity\n- **Fake Pulse Detection**: Alerts for suspicious location pulses\n- **Team Overview**: Employee management and activity summaries\n- **Payroll Integration**: Track work hours and calculate pay based on valid pulses\n- **Employee Adjustments**: Manage bonuses, deductions, and salary adjustments\n\n## Technical Architecture\n\n### Frontend Stack\n- **Framework**: Flutter 3.32.0\n- **State Management**: StatefulWidget with setState\n- **Local Database**: Hive (NoSQL) for offline-first architecture\n- **Location Services**: geolocator package\n- **HTTP Client**: http package\n- **Fonts**: Google Fonts (IBM Plex Sans Arabic)\n\n### Backend Stack (In Development)\n- **Database**: Supabase (PostgreSQL with PostGIS)\n- **Authentication**: Supabase Auth\n- **Real-time**: Supabase Realtime subscriptions\n- **Edge Functions**: TypeScript-based serverless functions\n- **Geofencing**: PostGIS spatial queries for location validation\n\n### Key Dependencies\n```yaml\ndependencies:\n  - geolocator: Location tracking\n  - connectivity_plus: Network status monitoring  \n  - hive & hive_flutter: Local offline storage\n  - http: API communication\n  - supabase_flutter: Backend integration\n  - google_fonts: Arabic typography\n  - permission_handler: Platform permissions\n```\n\n## Database Schema (Local - Hive)\n\n### Boxes\n1. **offline_pulses**: Queue of unsent location pulses\n2. **pulse_history**: Log of all pulse activity\n3. **employees**: Employee profiles and credentials\n4. **employee_adjustments**: Salary adjustments and bonuses\n\n## Configuration\n\n### Environment Variables\nThe app supports the following environment variables for configuration:\n\n```dart\nSUPABASE_URL              // Supabase project URL\nSUPABASE_ANON_KEY         // Supabase anonymous key\nSUPABASE_PULSE_TABLE      // Table name for pulses (default: 'pulses')\nPRIMARY_HEARTBEAT_ENDPOINT // Legacy HTTP endpoint\nPRIMARY_OFFLINE_SYNC_ENDPOINT // Legacy sync endpoint\nBACKUP_HOST               // Backup server host (dev only)\n```\n\n### Restaurant Location Settings\nLocation validation settings in `lib/constants/restaurant_config.dart`:\n- Default coordinates: 30.0444° N, 31.2357° E (Cairo area)\n- Geofence radius: 100 meters\n- Location enforcement can be toggled for testing\n\n## Development Setup\n\n### Running Locally\n```bash\n# Install dependencies\nflutter pub get\n\n# Run on web (development)\nflutter run -d web-server --web-hostname=0.0.0.0 --web-port=5000\n\n# Build for web (production)\nflutter build web --release\n\n# Serve built files\ndhttpd --host 0.0.0.0 --port 5000 --path build/web\n```\n\n### Demo Data\nThe app seeds demo employees on first run:\n- **Admin**: مريم حسن (EMP001, PIN: 1234)\n- **HR**: عمر سعيد (EMP002, PIN: 5678)  \n- **Monitor**: نورة عادل (EMP003, PIN: 2468)\n\n## Replit Environment\n\n### Workflows\n- **Flutter Web Server**: Serves the built web app on port 5000 using dhttpd\n\n### Deployment\n- **Type**: Autoscale (stateless web app)\n- **Build**: `flutter build web --release`\n- **Run**: `dhttpd --host 0.0.0.0 --port 5000 --path build/web`\n\n## Recent Changes (October 2025)\n\n### Flutter Web Compatibility Fixes\n- Fixed `Platform.isAndroid` checks to work on web using `kIsWeb` guards\n- Updated `DropdownButtonFormField` API from `initialValue` to `value`\n- Adjusted Dart SDK compatibility to support 3.8.0+\n\n### Infrastructure Setup\n- Configured Nix environment with Flutter and Dart tools\n- Set up dhttpd for production-ready web serving\n- Added .gitignore entries for Flutter artifacts\n\n## Supabase Backend Implementation\n\n### Database Tables (PostgreSQL)\n1. **profiles**: User profiles extending auth.users\n2. **shifts**: Check-in/check-out records  \n3. **pulses**: Location pulses with geofence validation\n\n### Automated Geofencing\n- PostGIS extension for spatial queries\n- Trigger-based geofence validation on pulse insert\n- Distance calculation from restaurant coordinates\n\n### Row Level Security (RLS)\n- Users can only access their own data\n- Admins have full read access\n- Role-based permissions enforced at database level\n\n## API Endpoints\n\n### Current Implementation\n- Primary: Fallback HTTP endpoints (configurable)\n- Backup: Local development server (`tool/pulse_backup_server.dart`)\n- Supabase: Real-time sync via Supabase client\n\n### Edge Functions (Planned)\n- `calculate-payroll`: Compute employee pay based on valid pulses\n\n## User Preferences\n- Arabic RTL interface preferred\n- Material Design 3 with orange primary color (#F37021)\n- Clean, modern typography using IBM Plex Sans Arabic\n\n## Future Enhancements\n- Connect to production Supabase backend\n- Implement official authentication provider\n- Optimize pulse frequency (30-60 seconds) for battery efficiency\n- Add payroll report generation\n- Implement advanced admin analytics\n\n## Support & Troubleshooting\n\n### Common Issues\n1. **Location not working on web**: Web browsers have limited location API access\n2. **Offline pulses not syncing**: Check network connectivity and Supabase credentials\n3. **Permission errors**: Notification permissions only work on native platforms\n\n### Files to Check\n- `/lib/config/app_config.dart`: Backend configuration\n- `/lib/constants/restaurant_config.dart`: Geofence settings\n- `/lib/services/pulse_backend_client.dart`: API integration\n\n## License & Credits\nThis is a private attendance management system for Oldies restaurant chain.\n","size_bytes":6487},"supabase/README.md":{"content":"# Supabase Backend Setup for Oldies Workers\n\n## Overview\nThis directory contains the complete Supabase backend implementation for the Oldies Workers employee attendance system.\n\n## Directory Structure\n```\nsupabase/\n├── migrations/\n│   ├── 001_initial_schema.sql       # Database tables and indexes\n│   ├── 002_geofence_function.sql    # PostGIS geofencing logic\n│   └── 003_rls_policies.sql         # Row Level Security policies\n├── functions/\n│   └── calculate-payroll/\n│       └── index.ts                 # Payroll calculation edge function\n└── README.md                        # This file\n```\n\n## Prerequisites\n1. A Supabase project ([Create one](https://app.supabase.com))\n2. Supabase CLI installed (`npm install -g supabase`)\n3. PostgreSQL with PostGIS extension (included in Supabase)\n\n## Setup Instructions\n\n### 1. Initialize Supabase Project\n```bash\n# Link to your Supabase project\nsupabase link --project-ref your-project-ref\n\n# Or initialize a new local project\nsupabase init\n```\n\n### 2. Apply Database Migrations\nRun the migrations in order to set up your database schema:\n\n```bash\n# Apply all migrations\nsupabase db push\n\n# Or apply them individually\npsql -h db.your-project.supabase.co -U postgres -d postgres -f supabase/migrations/001_initial_schema.sql\npsql -h db.your-project.supabase.co -U postgres -d postgres -f supabase/migrations/002_geofence_function.sql\npsql -h db.your-project.supabase.co -U postgres -d postgres -f supabase/migrations/003_rls_policies.sql\n```\n\n### 3. Deploy Edge Function\n```bash\n# Deploy the payroll calculation function\nsupabase functions deploy calculate-payroll\n\n# Set environment variables for the function (if needed)\nsupabase secrets set HOURLY_RATE=30\n```\n\n### 4. Configure Flutter App\nUpdate your Flutter app's `lib/config/app_config.dart`:\n\n```dart\nstatic const String supabaseUrl = 'https://your-project.supabase.co';\nstatic const String supabaseAnonKey = 'your-anon-key';\n```\n\n## Database Schema\n\n### Tables\n\n#### `profiles`\nExtends auth.users with employee information\n- `id`: UUID (references auth.users)\n- `full_name`: Employee's full name\n- `employee_id`: Unique employee identifier\n- `role`: employee | admin | hr | monitor\n\n#### `shifts`\nRecords work shifts\n- `id`: UUID\n- `user_id`: References profiles\n- `check_in_time`: Timestamp of check-in\n- `check_out_time`: Timestamp of check-out (nullable)\n- `status`: active | completed | cancelled\n\n#### `pulses`\nLocation pulses for attendance verification\n- `id`: UUID\n- `shift_id`: References shifts\n- `location`: PostGIS geography point (lat, lon)\n- `is_within_geofence`: Boolean (auto-calculated)\n- `created_at`: Timestamp\n\n## Geofencing System\n\n### How It Works\n1. Employee sends location pulse during their shift\n2. Pulse is inserted into the `pulses` table\n3. `on_pulse_insert` trigger fires automatically\n4. `check_geofence()` function calculates distance from restaurant\n5. `is_within_geofence` is set to TRUE if within 100m, FALSE otherwise\n\n### Configuring Restaurant Location\nDefault location: 30.0444°N, 31.2357°E (Cairo)\n\nTo change the restaurant location, edit `002_geofence_function.sql`:\n\n```sql\nrestaurant_location := ST_GeogFromText('POINT(new_longitude new_latitude)');\ngeofence_radius_meters NUMERIC := 100; -- Change radius here\n```\n\nThen reapply the migration:\n```bash\npsql -f supabase/migrations/002_geofence_function.sql\n```\n\n## Row Level Security (RLS)\n\n### Policies Summary\n\n#### Employees Can:\n- View/update their own profile\n- View/create their own shifts\n- Create pulses for their own shifts\n- View pulses from their own shifts\n\n#### Admins Can:\n- View all profiles, shifts, and pulses\n- Update any profile or shift\n- Manage employee data\n\n### Testing RLS\n```sql\n-- Test as regular user\nSELECT * FROM pulses; -- Returns only user's pulses\n\n-- Test as admin\nSELECT * FROM pulses; -- Returns all pulses\n```\n\n## Edge Functions\n\n### calculate-payroll\n\nCalculates employee pay based on valid location pulses.\n\n#### Request\n```json\n{\n  \"user_id\": \"uuid\",\n  \"start_date\": \"2025-01-01T00:00:00Z\",\n  \"end_date\": \"2025-01-31T23:59:59Z\",\n  \"hourly_rate\": 30\n}\n```\n\n#### Response\n```json\n{\n  \"user_id\": \"uuid\",\n  \"employee_id\": \"EMP001\",\n  \"full_name\": \"مريم حسن\",\n  \"period\": {\n    \"start\": \"2025-01-01T00:00:00Z\",\n    \"end\": \"2025-01-31T23:59:59Z\"\n  },\n  \"total_shifts\": 20,\n  \"total_valid_pulses\": 4800,\n  \"total_work_hours\": 160,\n  \"hourly_rate\": 30,\n  \"total_pay\": 4800.00,\n  \"shifts_detail\": [...]\n}\n```\n\n#### Calling the Function\n```dart\n// From Flutter app\nfinal response = await Supabase.instance.client.functions.invoke(\n  'calculate-payroll',\n  body: {\n    'user_id': userId,\n    'start_date': '2025-01-01T00:00:00Z',\n    'end_date': '2025-01-31T23:59:59Z',\n    'hourly_rate': 30,\n  },\n);\n```\n\n```bash\n# From curl\ncurl -X POST 'https://your-project.supabase.co/functions/v1/calculate-payroll' \\\n  -H \"Authorization: Bearer your-anon-key\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"user_id\":\"uuid\",\"start_date\":\"2025-01-01\",\"end_date\":\"2025-01-31\"}'\n```\n\n## Testing\n\n### Sample Data\nInsert test data:\n\n```sql\n-- Insert test employee\nINSERT INTO profiles (id, full_name, employee_id, role)\nVALUES (\n  auth.uid(), -- Current user's ID\n  'Test Employee',\n  'EMP999',\n  'employee'\n);\n\n-- Insert test shift\nINSERT INTO shifts (user_id)\nVALUES (auth.uid())\nRETURNING id;\n\n-- Insert test pulse (will auto-validate geofence)\nINSERT INTO pulses (shift_id, location)\nVALUES (\n  'shift-uuid',\n  ST_GeogFromText('POINT(31.2357 30.0444)') -- Inside geofence\n);\n\n-- Check if geofence worked\nSELECT id, is_within_geofence FROM pulses;\n```\n\n### Verify Geofencing\n```sql\n-- Test pulse inside geofence (should be TRUE)\nINSERT INTO pulses (shift_id, location)\nVALUES ('shift-id', ST_GeogFromText('POINT(31.2357 30.0444)'));\n\n-- Test pulse outside geofence (should be FALSE)\nINSERT INTO pulses (shift_id, location)\nVALUES ('shift-id', ST_GeogFromText('POINT(31.0 30.0)'));\n\n-- Verify results\nSELECT \n  id,\n  ST_AsText(location::geometry) as location_text,\n  is_within_geofence,\n  ST_Distance(\n    location,\n    ST_GeogFromText('POINT(31.2357 30.0444)')\n  ) as distance_meters\nFROM pulses;\n```\n\n## Monitoring\n\n### View Attendance Statistics\n```sql\n-- Employee attendance summary\nSELECT \n  p.employee_id,\n  p.full_name,\n  COUNT(DISTINCT s.id) as total_shifts,\n  COUNT(pu.id) as total_pulses,\n  COUNT(pu.id) FILTER (WHERE pu.is_within_geofence) as valid_pulses,\n  ROUND(\n    COUNT(pu.id) FILTER (WHERE pu.is_within_geofence)::NUMERIC / \n    NULLIF(COUNT(pu.id), 0) * 100, \n    2\n  ) as valid_percentage\nFROM profiles p\nLEFT JOIN shifts s ON s.user_id = p.id\nLEFT JOIN pulses pu ON pu.shift_id = s.id\nGROUP BY p.id, p.employee_id, p.full_name;\n```\n\n### Detect Suspicious Activity\n```sql\n-- Find pulses outside geofence\nSELECT \n  p.employee_id,\n  p.full_name,\n  pu.created_at,\n  ST_AsText(pu.location::geometry) as location,\n  ST_Distance(\n    pu.location,\n    ST_GeogFromText('POINT(31.2357 30.0444)')\n  ) as distance_from_restaurant\nFROM pulses pu\nJOIN shifts s ON s.id = pu.shift_id\nJOIN profiles p ON p.id = s.user_id\nWHERE pu.is_within_geofence = FALSE\nORDER BY pu.created_at DESC;\n```\n\n## Troubleshooting\n\n### Common Issues\n\n**1. PostGIS extension not enabled**\n```sql\nCREATE EXTENSION IF NOT EXISTS postgis;\n```\n\n**2. RLS blocking access**\n```sql\n-- Temporarily disable RLS for testing (NOT for production!)\nALTER TABLE pulses DISABLE ROW LEVEL SECURITY;\n```\n\n**3. Edge function timeout**\nIncrease timeout in `supabase/functions/calculate-payroll/index.ts`:\n```typescript\n// Add timeout configuration\nconst controller = new AbortController();\nconst timeoutId = setTimeout(() => controller.abort(), 30000); // 30 seconds\n```\n\n## Security Notes\n\n1. **Never commit real API keys** to version control\n2. **Use environment variables** for sensitive configuration\n3. **Test RLS policies** thoroughly before production\n4. **Rotate service role key** periodically\n5. **Monitor edge function usage** to prevent abuse\n\n## Next Steps\n\n1. ✅ Set up Supabase project\n2. ✅ Apply migrations\n3. ✅ Deploy edge functions\n4. ✅ Configure Flutter app\n5. 🔲 Test with real devices\n6. 🔲 Set up monitoring and alerts\n7. 🔲 Configure backup strategies\n8. 🔲 Implement analytics dashboard\n\n## Support\n\nFor issues related to:\n- Supabase platform: https://supabase.com/docs\n- PostGIS queries: https://postgis.net/documentation/\n- Edge Functions: https://supabase.com/docs/guides/functions\n\n## License\nThis backend implementation is part of the Oldies Workers attendance system.\n","size_bytes":8556},"supabase/functions/calculate-payroll/index.ts":{"content":"import { serve } from \"https://deno.land/std@0.168.0/http/server.ts\"\nimport { createClient } from 'https://esm.sh/@supabase/supabase-js@2'\n\nconst corsHeaders = {\n  'Access-Control-Allow-Origin': '*',\n  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',\n}\n\ninterface PayrollRequest {\n  user_id: string\n  start_date: string\n  end_date: string\n  hourly_rate?: number\n}\n\ninterface PayrollResult {\n  user_id: string\n  employee_id: string\n  full_name: string\n  period: {\n    start: string\n    end: string\n  }\n  total_shifts: number\n  total_valid_pulses: number\n  total_work_hours: number\n  hourly_rate: number\n  total_pay: number\n  shifts_detail: Array<{\n    shift_id: string\n    check_in: string\n    check_out: string | null\n    valid_pulses: number\n    work_duration_hours: number\n  }>\n}\n\nserve(async (req) => {\n  // Handle CORS preflight requests\n  if (req.method === 'OPTIONS') {\n    return new Response('ok', { headers: corsHeaders })\n  }\n\n  try {\n    // Initialize Supabase client\n    const supabaseClient = createClient(\n      Deno.env.get('SUPABASE_URL') ?? '',\n      Deno.env.get('SUPABASE_ANON_KEY') ?? '',\n      {\n        global: {\n          headers: { Authorization: req.headers.get('Authorization')! },\n        },\n      }\n    )\n\n    // Parse request body\n    const requestBody: PayrollRequest = await req.json()\n    const { user_id, start_date, end_date, hourly_rate = 30 } = requestBody\n\n    // Validate required fields\n    if (!user_id || !start_date || !end_date) {\n      throw new Error('user_id, start_date, and end_date are required')\n    }\n\n    // Get user profile\n    const { data: profile, error: profileError } = await supabaseClient\n      .from('profiles')\n      .select('employee_id, full_name')\n      .eq('id', user_id)\n      .single()\n\n    if (profileError) throw profileError\n    if (!profile) throw new Error('User not found')\n\n    // Fetch all shifts for the user in the date range\n    const { data: shifts, error: shiftsError } = await supabaseClient\n      .from('shifts')\n      .select(`\n        id,\n        check_in_time,\n        check_out_time,\n        status\n      `)\n      .eq('user_id', user_id)\n      .gte('check_in_time', start_date)\n      .lte('check_in_time', end_date)\n      .order('check_in_time', { ascending: true })\n\n    if (shiftsError) throw shiftsError\n\n    let totalValidPulses = 0\n    let totalWorkHours = 0\n    const shiftsDetail = []\n\n    // Process each shift\n    for (const shift of shifts || []) {\n      // Fetch valid pulses for this shift\n      const { data: validPulses, error: pulsesError } = await supabaseClient\n        .from('pulses')\n        .select('id, created_at')\n        .eq('shift_id', shift.id)\n        .eq('is_within_geofence', true)\n        .order('created_at', { ascending: true })\n\n      if (pulsesError) throw pulsesError\n\n      const validPulseCount = validPulses?.length || 0\n      totalValidPulses += validPulseCount\n\n      // Calculate work duration for this shift\n      let workDurationHours = 0\n      \n      if (validPulses && validPulses.length > 0) {\n        // Use first and last valid pulse to determine work duration\n        const firstPulse = new Date(validPulses[0].created_at)\n        const lastPulse = new Date(validPulses[validPulses.length - 1].created_at)\n        \n        const durationMs = lastPulse.getTime() - firstPulse.getTime()\n        workDurationHours = durationMs / (1000 * 60 * 60) // Convert to hours\n      }\n\n      totalWorkHours += workDurationHours\n\n      shiftsDetail.push({\n        shift_id: shift.id,\n        check_in: shift.check_in_time,\n        check_out: shift.check_out_time,\n        valid_pulses: validPulseCount,\n        work_duration_hours: Math.round(workDurationHours * 100) / 100, // Round to 2 decimals\n      })\n    }\n\n    // Calculate total pay\n    const totalPay = totalWorkHours * hourly_rate\n\n    // Prepare response\n    const result: PayrollResult = {\n      user_id,\n      employee_id: profile.employee_id,\n      full_name: profile.full_name,\n      period: {\n        start: start_date,\n        end: end_date,\n      },\n      total_shifts: shifts?.length || 0,\n      total_valid_pulses: totalValidPulses,\n      total_work_hours: Math.round(totalWorkHours * 100) / 100,\n      hourly_rate,\n      total_pay: Math.round(totalPay * 100) / 100,\n      shifts_detail: shiftsDetail,\n    }\n\n    return new Response(\n      JSON.stringify(result),\n      {\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n        status: 200,\n      },\n    )\n  } catch (error) {\n    return new Response(\n      JSON.stringify({ error: error.message }),\n      {\n        headers: { ...corsHeaders, 'Content-Type': 'application/json' },\n        status: 400,\n      },\n    )\n  }\n})\n","size_bytes":4726},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483}},"version":2}