Prompt لإرساله إلى Replit AI

مرحبًا، أحتاج مساعدتك في تعديل مشروع Flutter الموجود داخل المسار lib فقط (لا تلمس كود السيرفر أو مجلد server). المطلوب إنجاز المهام التالية بدقة، مع التأكد من الربط الكامل مع خدمات الـ API الموجودة في requests_api_service.dart و branch_manager_api_service.dart وأي خدمات جديدة نضيفها:

1) إصلاح شاشة طلبات الموظف requests_page.dart
الملف الحالي مكسور (TabBar ناقص، عناصر Widgets خارج الكلاس). أعد بناء الشاشة بحيث تعمل TabController بثلاثة تبويبات: الإجازات، السلف، الاستراحات.
تأكد أن كل تبويب يعرض الطلبات الفعلية من الـ API:
fetchLeaveRequests, fetchAdvanceRequests, fetchBreaks.
أضف زر في تبويب الاستراحات يسمح بحذف جميع الطلبات المرفوضة بالاتصال بالدالة RequestsApiService.deleteRejectedBreaks.
لا تسمح للموظف بإرسال طلب استراحة جديد إن لم يكن لديه Check-in نشط (استخدم endpoint جاهز RequestsApiService.checkActiveShift أو أضف استدعاء GET shifts/status/:employeeId إن لم تكن موجودة).
اجعل زر “بدء الاستراحة” و “إنهاء الاستراحة” يعملان فعليًا باستدعاء startBreak و endBreak.
عند بدء الاستراحة يجب أن يتحول الـ UI لإظهار العداد المتبقي، وأن تعتبر الاستراحة وقتًا غير مُحتسب (اعرض رسالة مناسبة؛ الحساب الحقيقي يتم في الباك اند، فقط تأكد من إظهار الحالة الصحيحة).
عند فتح الصفحة، إذا كان الموظف لديه Check-in نشط بالفعل، اعرض الحالة بدلاً من زر تسجيل حضور جديد (استفد من API موجود للـ shifts).
2) تمكين حذف الطلبات المرفوضة
في تبويبات الإجازات والسلف والاستراحات، أضف زر واضح لحذف كل الطلبات التي حالتها rejected عبر استدعاء API مناسب (deleteRejectedLeaves, deleteRejectedAdvances, deleteRejectedBreaks). إذا لم تكن الدوال موجودة في RequestsApiService أضفها، لكن بدون لمس السيرفر (يعني فقط قم بنداء الـ endpoint الموجود أصلًا).
بعد الحذف أعد تحميل القائمة وأظهر SnackBar بنتيجة العملية.
3) تحديث تطبيق المدير (Flutter)
الشاشة الرئيسية للمدير موجودة في branch_manager_screen.dart. أضف الصفحات التالية داخل التطبيق نفسه (على شكل تبويبات أو أقسام جديدة):

a. صفحة تسجيل الحضور والانصراف للمدير نفسه

استخدم نفس واجهة الموظف لكن مربوطة بحساب المدير (سيتصرف كموظف بصفته Manager).
يجب أن يتمكن من:
تسجيل الحضور/الانصراف (باستدعاء نفس دوال RequestsApiService أو خدمات مدير مخصصة).
إرسال طلب حضور أو طلب انصراف (Pending) ليُراجع من Owner.
b. صفحة الطلبات

اعرض طلبات الحضور/الانصراف الخاصة بالفرع مع القدرة على الموافقة/الرفض.
اعرض طلبات الاستراحات الخاصة بالموظفين مع القدرة على الموافقة/الرفض/التأجيل (تستدعي reviewBreakRequest).
اربط الأزرار بالـ API الفعلية.
c. صفحة التقرير

تقارير اليوم الأول من الشهر واليوم السادس عشر (ممكن تبديل التاريخ بالزر بين 1 و 16).
اعرض ملخص ساعات العمل والنبضات والأرباح للفرع اعتمادًا على الـ API المتاحة (attendanceReport, pulses/period, إلخ).
d. صفحة الملف الشخصي

اعرض بيانات المدير (الاسم، الفرع، الساعات، الراتب الحالي).
البيانات تأتي من API موجودة (BranchManagerApiService.getProfile إن لم يكن موجودًا أضف دالة تستدعي endpoint /api/manager/profile).
4) إنشاء صفحة Owner (Flutter)
أضف شاشة جديدة OwnerDashboardScreen داخل lib/screens/owner/.

المطلوب أن تكون مشابهة للوحة المدير لكن بمستوى أعلى، مع التبويبات التالية:

طلبات المديرين

اعرض كل طلبات الإجازات، السلف، الاستراحات الخاصة بالمديرين (Pending) مع أزرار قبول/رفض.
استخدم Endpoints متاحة مثل /api/owner/manager-requests، وإذا لم تكن موجودة في services أضفها لكن لا تعدل السيرفر.
ضبط قيمة الساعة

صفحة فيها جدول لكل الموظفين والمديرين.
لكل صف: الاسم، الدور (موظف/مدير)، الراتب الحالي، عدد الساعات المُسجلة هذا الشهر، قيمة الساعة الحالية.
أضف حقلاً قابلاً للتعديل لقيمة الساعة، وعند الضغط على حفظ استدعِ API (مثال: PATCH /api/owner/employees/:id/hourly-rate) لتحديث القيمة.
بعد التحديث أعد تحميل البيانات وأظهر SnackBar.
قائمة الموظفين والمديرين

جدول موحد يحتوي على جميع الأشخاص، مع أزرار لعرض الملف الشخصي لكل شخص (يمكن فتح BottomSheet أو صفحة فرعية).
الملف الشخصي يعرض نبضات الشهر، الساعات، السلف المعتمدة، الإجازات الممنوحة، إلخ (استعمل الخدمات أو endpoints المتاحة).
تقارير مالية دورية

ملخص أرباح الشركة حسب اليوم (يوم 1 ويوم 16).
اعرض إجمالي الرواتب، إجمالي السلف، إجمالي عدد ساعات العمل.
اربط بالـ API الموجودة (/api/owner/financial-report?period=start/end).
تأكد أن Owner يمكنه قبول/رفض طلبات المديرين وبالتالي تُمرر القرارات إلى الباك اند عبر نفس الـ API المستخدَمة للمدير لكن بصلاحية أعلى.

5) إصلاح صفحة السلف للموظف
تبويب السلف الحالي لا يعمل. بعد إصلاح الشاشة، تأكد أنه:
يعرض الطلبات السابقة مع الحالة والألوان.
يسمح بإرسال طلب جديد.
يظهر الحد الأقصى المتاح للسلفة.
يتعامل مع الأخطاء ويعرضها.
6) ربط بدء/إيقاف الاستراحة
في واجهة الموظف، زود زر واضح داخل بطاقة الاستراحة:
إذا كانت Approved → زر “بدء الاستراحة” يستدعي startBreak.
إذا كانت Active → زر “إنهاء الاستراحة” يستدعي endBreak.
أثناء الاستراحة، أعرض عداد الوقت المتبقي (المنطق موجود جزئياً، اكمله كي يظهر دائمًا).
عند بدء الاستراحة، تأكد أن واجهة الموظف تعرض رسالة بأن الوقت الآن يُحسب كاستراحة وليس وقت عمل (سياق فقط؛ الباك اند بالفعل يعالج الحساب).
لا تسمح للموظف بطلب استراحة من الأساس إذا لم يكن لديه attendance نشط (تحقق قبل فتح الـ BottomSheet).
7) تنظيف الكود
أعد ترتيب RequestsPage بشكل نظيف:
RequestsPageState يحتوي على TabController، AppBar، وTabBarView.
كل تبويب في ملف واحد (leave, advance, break).
حافظ على نفس التصميم قدر الإمكان (ألوان AppColors).
أعد بناء استايلات الأزرار لتستخدم AppColors.primaryOrange وغيرها.
8) لا تعدل ملفات السيرفر
أي تعديل يجب أن يكون داخل lib فقط (Flutter).
إذا احتجت endpoint غير موجود، أضف فقط دالة في الـ services تستدعيه (نفترض أنه موجود في الباك اند بالفعل).
بعد تنفيذ كل الخطوات:

تأكد من أن التطبيق يبني بنجاح (flutter analyze بدون أخطاء) وتشغيل واجهة الموظف والمدير والـ Owner.
ضمّن في PR أو الرد قائمة بما تم تنفيذه وأي حدود أو TODO متبقية.
شكرًا!

GPT-5-Codex (Preview) • 1x
