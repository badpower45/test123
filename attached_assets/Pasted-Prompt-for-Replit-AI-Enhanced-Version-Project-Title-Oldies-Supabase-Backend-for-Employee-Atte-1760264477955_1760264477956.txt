Prompt for Replit AI (Enhanced Version)
Project Title: "Oldies" - Supabase Backend for Employee Attendance System

Objective:
Build the complete Supabase backend for a real-time employee attendance tracking system. The system will have a Flutter mobile app for employees and a web dashboard for admins.

Core Technology Stack:

Backend & Database: Supabase (Use it for Auth, PostgreSQL Database, Triggers, and Edge Functions).

Clients (for context): A Flutter app and a Web app.

1. Database Schema Setup:
Please generate the initial SQL schema for the following tables. Ensure you set up Primary Keys and Foreign Key relationships.

Table: profiles (extends auth.users)

id (uuid, Primary Key, references auth.users.id)

full_name (text)

employee_id (text, unique)

role (text, default: 'employee')

Table: shifts (records each work shift)

id (uuid, Primary Key, default: gen_random_uuid())

user_id (uuid, Foreign Key to profiles.id)

check_in_time (timestampz, default: now())

check_out_time (timestampz, nullable)

status (text, default: 'active')

Table: pulses (stores periodic location updates)

id (uuid, Primary Key, default: gen_random_uuid())

shift_id (uuid, Foreign Key to shifts.id)

location (geography(Point), stores Lat/Lon sent from the client)

is_within_geofence (boolean, this will be calculated by the trigger below)

created_at (timestampz, default: now())

2. Automated Pulse Processing (The Pulse System Logic):
This is a critical feature. Create a PostgreSQL function and a trigger to automatically check if a pulse is inside the restaurant's location.

Enable PostGIS: First, ensure the postgis extension is enabled.

Create a PostgreSQL Function (check_geofence):

This function will be triggered before a new pulse is inserted.

Logic: It must calculate the distance between the new pulse's location and a fixed point representing the restaurant (e.g., POINT(31.2652 29.9863)).

It should check if this distance is within a specific radius (e.g., 100 meters).

It must set the is_within_geofence value of the new pulse to true or false based on the calculation.

Create a Trigger (on_pulse_insert):

This trigger will execute the check_geofence function before every INSERT operation on the pulses table.

3. Row Level Security (RLS) Policies:
Create and enable the necessary RLS policies for security:

For profiles: Users can only view/update their own profile. Admins (role = 'admin') can view all profiles.

For shifts & pulses: Users can only create/view their own shifts and pulses. Admins can view all records.

4. Backend Logic (Supabase Edge Function):
Create a Supabase Edge Function named calculate-payroll.

Input: user_id and date_range (start_date, end_date).

Functionality:

Fetch all shifts for the user_id in the date_range.

For each shift, fetch associated pulses where is_within_geofence is true.

Calculate the total valid work duration from these valid pulses.

Apply a rate (e.g., 30 EGP/hour).

Output: Return a JSON object with the calculated pay: { "total_pay": 1500.00 }.

Action Request:
Start by generating the SQL code for the tables. Then, provide the SQL for the check_geofence function and its trigger. Follow with the RLS policies, and finally, the TypeScript code for the calculate-payroll Edge Function.